#!/bin/bash

echo "+ Starting compile of kernels"
. /etc/lunar/config
export VERBOSE=off
optimize

prepare()
{
    echo "unpacking..."
    cd $ISO_SOURCE/kernels
    rm -rf linux-$ISO_KVER
    tar jxf /var/spool/lunar/linux-$ISO_KVER.tar.bz2
    cd linux-$ISO_KVER
    mkdir patches
    cd patches
    tar jxf /var/spool/lunar/ll-r8.0rc3.tar.bz2
}

prepare_patch()
{
    cd $ISO_SOURCE/kernels/linux-$ISO_KVER
    for P in $@; do
        for PP in patches/$P/*; do
            patch_it $PP 1
	done
    done
}

prepare_options()
{
    cp $ISO_SOURCE/kernels/baseconfig $ISO_SOURCE/kernels/linux-$ISO_KVER/.config 
    for OPT in $@; do
        cat $ISO_SOURCE/kernels/config_$OPT | while read O; do 
            OPT=$(echo $O|cut -d= -f1)
            VAL=$(echo $O|cut -d= -f2)
            sedit "/$OPT=/d" $ISO_SOURCE/kernels/linux-$ISO_KVER/.config
	    sedit "/$OPT is not set/d" $ISO_SOURCE/kernels/linux-$ISO_KVER/.config
	    if [ "$VAL" == "n" ]; then
	        echo "# $OPT is not set" >> $ISO_SOURCE/kernels/linux-$ISO_KVER/.config
	    else
	        echo "$OPT=$VAL" >> $ISO_SOURCE/kernels/linux-$ISO_KVER/.config
	    fi
	done
    done
}

prepare_version()
{
    sedit "s/^EXTRAVERSION =.*/EXTRAVERSION = $1/" $ISO_SOURCE/kernels/linux-$ISO_KVER/Makefile
}

build_kernel()
{
    echo "+ building $ISO_KVER$1"
    cd $ISO_SOURCE/kernels/linux-$ISO_KVER
    yes n | make oldconfig &&
    make dep &&
    make bzImage &&
    make modules &&
    mkdir -p $ISO_SOURCE/kernels/BUILD
    mkdir -p $ISO_SOURCE/kernels/BUILD/boot
    make INSTALL_MOD_PATH=$ISO_SOURCE/kernels/BUILD modules_install
    cp arch/i386/boot/bzImage $ISO_SOURCE/kernels/BUILD/boot/$ISO_KVER$1
    cp System.map $ISO_SOURCE/kernels/BUILD/boot/System.map-$ISO_KVER$1
    cp .config $ISO_SOURCE/kernels/BUILD/boot/config-$ISO_KVER$1
    gzip $ISO_SOURCE/kernels/BUILD/boot/config-$ISO_KVER$1
    mkdir -p $ISO_SOURCE/kernels/BUILD/usr/include/linux-$ISO_KVER$1
    cp -aL $ISO_SOURCE/kernels/linux-$ISO_KVER/include/asm $ISO_SOURCE/kernels/BUILD/usr/include/linux-$ISO_KVER$1/asm
    cp -aL $ISO_SOURCE/kernels/linux-$ISO_KVER/include/linux $ISO_SOURCE/kernels/BUILD/usr/include/linux-$ISO_KVER$1/linux
    cd $ISO_SOURCE/kernels/BUILD
    tar cjf $ISO_SOURCE/kernels/$ISO_KVER$1.tar.bz2 boot/ lib/ usr/
    cd $ISO_SOURCE/kernels
    rm -rf $ISO_SOURCE/kernels/BUILD
    rm -rf $ISO_SOURCE/kernels/linux-$ISO_KVER
}

build()
{
    prepare
    prepare_patch $(echo $3)
    prepare_options $(echo $2)
    prepare_version $1
    build_kernel $1
}

VERBSOSE=on

build -safe "nosmp lowmem safe" "fix"
build -nosmp "nosmp lowmem" "fix main"
build -smp-4gb "smp mem" "fix main"
build -agr-nosmp "nosmp lowmem lowlat" "fix main aggressive"
build -agr-smp-4gb "smp mem lowlat" "fix main aggressive"
build -stb-nosmp "nosmp lowmem" "fix"
build -stb-smp-4gb "smp mem" "fix"
build -vnl-nosmp "nosmp lowmem" ""
build -vnl-smp-4gb "smp mem" ""
build -grs-nosmp "nosmp lowmem grsec" "fix main grsecurity"
build -grs-smp-4gb "smp mem grsec" "fix main grsecurity"
build -om-nosmp "nosmp lowmem om" "fix om"
build -omsmp-4gb "smp mem om" "fix om"

touch $ISO_TARGET/.kernels
