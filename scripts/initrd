#!/bin/bash

. /etc/lunar/config

cd $ISO_SOURCE/initrd

umount $ISO_TARGET/dev &> /dev/null
umount $ISO_TARGET/proc &> /dev/null
umount template/dev &> /dev/null
umount template/proc &> /dev/null

rm -rf BUILD

# template first
cp -a --no-dereference template BUILD
find BUILD -type d -name '.svn' -exec rm -rf {} \; >/dev/null 2>&1
mkdir -p BUILD/{mnt,proc,var/lib/discover}
if [ "$ISO_KSUFFIX" == "2.6" ]; then
	mkdir BUILD/sys
fi

echo "+ copying binaries and required files"
# next up are the required stuff from the BUILD
transfer()
{
	while read ITEM DIR; do
		if [ -n "$DIR" ]; then
			mkdir -p "$ISO_SOURCE/initrd/BUILD/$DIR"
			cp --no-dereference "$ISO_TARGET/$ITEM" "$ISO_SOURCE/initrd/BUILD/$DIR"
		else
	    	mkdir -p "$ISO_SOURCE/initrd/BUILD/$(dirname $ITEM)"
	    	cp --no-dereference "$ISO_TARGET/$ITEM" "$ISO_SOURCE/initrd/BUILD/$(dirname $ITEM)"
		fi
	done
}

(
	cd $ISO_TARGET
	cat $ISO_SOURCE/initrd/initrd.list | transfer
	cat $ISO_SOURCE/initrd/initrd.list-$ISO_KSUFFIX | transfer
	$ISO_SOURCE/scripts/ldd-gather $ISO_SOURCE/initrd/initrd.list | transfer
	$ISO_SOURCE/scripts/ldd-gather $ISO_SOURCE/initrd/initrd.list-$ISO_KSUFFIX | transfer
)


# bare minimum of device nodes
echo "+ filling /dev"
mkdir -p BUILD/dev

if [ "${ISO_KSUFFIX}" = "2.4" ]; then
   cp -a --no-dereference $ISO_TARGET/etc/makedev.d/* BUILD/etc/makedev.d/
   cp template/etc/makedev.d/small BUILD/etc/makedev.d/generic
   $ISO_TARGET/dev/MAKEDEV -c BUILD/etc/makedev.d/ -d BUILD/dev generic
   $ISO_TARGET/dev/MAKEDEV -c BUILD/etc/makedev.d/ -d BUILD/dev console
   $ISO_TARGET/dev/MAKEDEV -c BUILD/etc/makedev.d/ -d BUILD/dev tty
   ( cd BUILD/dev ; rm -f tty[a-zA-Z]* hd[i-z]* s[dg][i-z]* fd[2-9]* fd[0-1][a-zA-Z]* sd[a-z][a-z]* )
   mkdir BUILD/dev/vc
   for node in BUILD/dev/tty* ; do
     ln -s $node $(echo $node | sed 's:tty:vc/:')
   done
   # strip it down even more
   rm -rf BUILD/etc/makedev.d/

   rm -f BUILD/dev/install-devices.sh

else
  (
      cd BUILD/dev
      mknod -m 0600 console c 5 1
      mknod -m 0666 null    c 1 3
      mknod -m 0600 ram0    b 1 0
      ln -s ram0 ram
      mknod -m 0600 ram1    b 1 1
  )
fi

# we also generate aaa_dev.tar.bz2 now
mkdir -p $ISO_SOURCE/aaa_dev
tar cj -C BUILD -f $ISO_SOURCE/aaa_dev/aaa_dev.tar.bz2 dev/

# compile the initrd image
echo "+ installing initrd kernels"
for KERNEL in linux safe ; do
  KVER=$(grep "^$KERNEL" $ISO_SOURCE/kernels/.initrd_kernels | cut -d" " -f2)
  mkdir TMP
  (
    cd TMP
    tar xjf $ISO_SOURCE/kernels/TAR/$KVER.tar.bz2
    mkdir -p $ISO_SOURCE/initrd/BUILD/lib/modules/$KVER/kernel/drivers/
    echo "+ cp -a --no-dereference lib/modules/$KVER/kernel/drivers/{ide,scsi,usb/host} $ISO_SOURCE/initrd/BUILD/lib/modules/$KVER/kernel/drivers/"
    cp -a --no-dereference lib/modules/$KVER/kernel/drivers/{ide,scsi,usb/host} $ISO_SOURCE/initrd/BUILD/lib/modules/$KVER/kernel/drivers/
    echo "+ cp lib/modules/$KVER/modules.* $ISO_SOURCE/initrd/BUILD/lib/modules/$KVER/"
    cp lib/modules/$KVER/* $ISO_SOURCE/initrd/BUILD/lib/modules/$KVER/
    echo "+ depmod -b $ISO_SOURCE/initrd/BUILD -a -F $ISO_SOURCE/kernels/$KERNEL.map $KVER"
    depmod -b $ISO_SOURCE/initrd/BUILD -a -F $ISO_SOURCE/kernels/$KERNEL.map $KVER
  )
  rm -rf TMP
done

echo "+ stripping everything"
for ITEM in BUILD/{bin,sbin,usr/bin,usr/sbin,lib,usr/lib}/* ; do
    strip $ITEM > /dev/null 2>&1
done
for ITEM in $(find BUILD -type d -name ".svn" | tac); do
    rm -rf $ITEM
done

chown -R root:root BUILD/*
  
echo "+ running ldconfig"
chroot BUILD /sbin/ldconfig
rm -f BUILD/etc/mtab
ln -s /proc/mounts BUILD/etc/mtab

# calculate the size of the initrd image
SIZE=$(du -kcs BUILD | tail -1 | cut -f1)
echo "+ estimated $SIZE"
(( SIZE = SIZE + 1 ))
echo "+ used size $SIZE"
dd if=/dev/zero of=initrd.raw bs=1024 count=$SIZE
losetup /dev/loop/0 initrd.raw
mkfs.ext2 -b 1024 -m 0 -i 1024 -N 1024 /dev/loop/0
mkdir BUILD.mnt
mount /dev/loop/0 BUILD.mnt
cp -a BUILD/* BUILD.mnt/
df -h BUILD.mnt/

umount BUILD.mnt || exit 1
tune2fs -l /dev/loop/0 | grep -e 'Free'
losetup -d /dev/loop/0

[ -f initrd ] && rm initrd
gzip -c initrd.raw > initrd  

rm -rf initrd.raw BUILD.mnt
# BUILD

