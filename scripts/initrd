#!/bin/bash

. /etc/lunar/config

cd $ISO_SOURCE/initrd

umount $ISO_SOURCE/BUILD/dev &> /dev/null
umount $ISO_SOURCE/BUILD/proc &> /dev/null
umount template/dev &> /dev/null
umount template/proc &> /dev/null

rm -rf BUILD

# template first
cp -a --no-dereference template BUILD
find BUILD -type d -name CVS -exec rm -rf {} \;
mkdir -p BUILD/mnt BUILD/proc BUILD/var/lib/discover

echo "+ copying binaries and required files"
# next up are the required stuff from the BUILD
for ITEM in $(cat initrd.list); do
    mkdir -p "BUILD/$(dirname $ITEM)"
    cp -a --no-dereference "$ISO_TARGET/$ITEM" "BUILD/$(dirname $ITEM)"
done
echo "+ filling /dev"

# bare minimum of device nodes
mkdir -p BUILD/dev
cp -a --no-dereference $ISO_TARGET/etc/makedev.d/* BUILD/etc/makedev.d/
cp template/etc/makedev.d/small BUILD/etc/makedev.d/generic
$ISO_TARGET/dev/MAKEDEV -c BUILD/etc/makedev.d/ -d BUILD/dev generic
$ISO_TARGET/dev/MAKEDEV -c BUILD/etc/makedev.d/ -d BUILD/dev console
$ISO_TARGET/dev/MAKEDEV -c BUILD/etc/makedev.d/ -d BUILD/dev tty
( cd BUILD/dev ; rm -f tty[a-zA-Z]* hd[i-z]* s[dg][i-z]* fd[2-9]* fd[0-1][a-zA-Z]* sd[a-z][a-z]* )
mkdir BUILD/dev/vc
for node in BUILD/dev/tty* ; do
  ln -s $node $(echo $node | sed 's:tty:vc/:')
done
# strip it down even more
rm -rf BUILD/etc/makedev.d/

# we also generate aaa_dev.tar.bz2 now
mkdir -p aaa_dev
tar cj -C BUILD -f $ISO_SOURCE/aaa_dev/aaa_dev.tar.bz2 dev/

echo "+ stripping everything"
for ITEM in $(find BUILD -type f); do
    strip $ITEM > /dev/null 2>&1
done
for ITEM in $(find BUILD -type d -name "CVS"); do
    rm -rf $ITEM
done
rm -f BUILD/dev/install-devices.sh
chroot BUILD /sbin/ldconfig
rm -f BUILD/etc/mtab
ln -s /proc/mounts BUILD/etc/mtab

# compile the initrd image
for KERNEL in linux safe ; do
  KVER=$(file -k $ISO_SOURCE/kernels/$KERNEL | sed 's/.*\(version .*\)/\1/' | cut -d' ' -f2)
  mkdir TMP
  (
    cd TMP
    tar xjf $ISO_SOURCE/kernels/TAR/$KVER.tar.bz2
    mkdir -p $ISO_SOURCE/initrd/BUILD/lib/modules/$KVER/kernel/drivers/
    depmod -b . -a -F $ISO_SOURCE/kernels/$KERNEL.map $KVER
    cp -a --no-dereference lib/modules/$KVER/kernel/drivers/{ide,scsi} $ISO_SOURCE/initrd/BUILD/lib/modules/$KVER/kernel/drivers/
    cp lib/modules/$KVER/* $ISO_SOURCE/initrd/BUILD/lib/modules/$KVER/
  )
  rm -rf TMP
done

# install discover in the initrd BUILD
mkdir -p BUILD/{bin,etc} BUILD/usr/share/discover/dtd 
cp $ISO_SOURCE/discover/discover BUILD/bin/
cp $ISO_SOURCE/discover/discover.conf BUILD/etc/
cp $ISO_SOURCE/discover/conffile.dtd BUILD/usr/share/discover/dtd/
cp $ISO_SOURCE/discover/discover.dtd BUILD/usr/share/discover/dtd/
cp $ISO_SOURCE/discover/data/* BUILD/usr/share/discover/
# make sure this is absolutely minimal:
for file in $(find BUILD/{lib,bin,sbin,usr}); do
  strip $file 2> /dev/null
done

chown -R root:root BUILD/*
  
# calculate the size of the initrd image
SIZE=$(du -kcs BUILD | tail -1 | cut -f1)
echo "+ estimated $SIZE"
(( SIZE = SIZE ))
echo "+ used size $SIZE"
dd if=/dev/zero of=initrd.raw bs=1024 count=$SIZE
losetup /dev/loop/0 initrd.raw
mkfs.ext2 -b 1024 -m 0 -i 1024 -N 1024 /dev/loop/0
mkdir BUILD.mnt
mount /dev/loop/0 BUILD.mnt
cp -a BUILD/* BUILD.mnt/
df -h BUILD.mnt/

umount BUILD.mnt || exit 1
tune2fs -l /dev/loop/0 | grep -e 'Free'
losetup -d /dev/loop/0

[ -f initrd ] && rm initrd
gzip -c initrd.raw > initrd  

rm -rf initrd.raw BUILD.mnt
# BUILD

