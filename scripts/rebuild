#!/bin/bash

export LC_ALL=C

# set gcc optimization
echo "CPU=$ISO_GCCARCH" >> $ISO_TARGET/etc/lunar/local/optimizations.GCC_3_4
# do the parallel thingy?
if [ -n "$ISO_MAKES" ]; then
  echo "MAKES=$ISO_MAKES" >> $ISO_TARGET/etc/lunar/local/optimizations.GNU_MAKE
fi
# don't ask about this when vim comes around:
echo "LUNAR_ALIAS_X=XOrg7" > $ISO_TARGET/etc/lunar/local/config

echo "+ Starting rebuild of all modules"
. /etc/lunar/config

export VERBOSE=off
export BOOTLOADER=none

mkdir -p $ISO_TARGET/var/build

mount -t proc proc $ISO_TARGET/proc

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "+          STARTING CONFIGURING MODULES                +"
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo ""

for mod in $(cat conf/base.list conf/base.list-${ISO_KSUFFIX} conf/extended.list) ; do
  yes '' | NEVER_ASK=y chroot $ISO_TARGET /sbin/lin --deps $mod
done

umount $ISO_TARGET/proc &> /dev/null
chroot $ISO_TARGET lin makedev
mount -t proc proc $ISO_TARGET/proc

chroot $ISO_TARGET /dev/install-devices.sh
chroot $ISO_TARGET rm -rf /var/build/makedev-*

case ${ISO_KSUFFIX} in
	2.4)
		cp kernels/conf/${ISO_KSUFFIX}/base $ISO_TARGET/etc/lunar/local/.config
		;;
	2.6)
		cp kernels/conf/${ISO_KSUFFIX}/base $ISO_TARGET/etc/lunar/local/.config.2.6.stable
		;;
esac

chroot $ISO_TARGET lin kernel-headers-${ISO_KSUFFIX}

# install core tools manually, since we can't download


echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "+          STARTING COMPILE PHASE OF ALL MODULES       +"
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo ""

# perl is notoriously problematic and needs to be built before glibc
chroot $ISO_TARGET lin perl

for mod in $(cat conf/base.list conf/base.list-${ISO_KSUFFIX} conf/extended.list) ; do
  chroot $ISO_TARGET /sbin/lin -c $mod
done

# openssh installs ssh keys so these are now tracked in the module :^(
chroot $ISO_TARGET /sbin/lin -c openssh
# e2fsprogs nabs /etc/mtab
chroot $ISO_TARGET /sbin/lin -c e2fsprogs
# we don't want vi linked against libX11
chroot $ISO_TARGET /sbin/lin -c vim --opts --without-x

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "+          REBUILD FINISHED                            +"
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

echo "Broken compiles:"
(cd $ISO_TARGET/var/build && ls -1)
echo ""

umount $ISO_TARGET/proc

touch $ISO_TARGET/.rebuild

