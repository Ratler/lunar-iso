#!/bin/bash

export LC_ALL=C

# set gcc optimization
echo "CPU=$ISO_GCCARCH" >> $ISO_TARGET/etc/lunar/local/optimizations.GCC_4_4
# do the parallel thingy?
if [ -n "$ISO_MAKES" ]; then
  echo "MAKES=$ISO_MAKES" >> $ISO_TARGET/etc/lunar/local/optimizations.GNU_MAKE
fi
# don't ask about this when vim comes around:
echo "LUNAR_ALIAS_X=XOrg7" > $ISO_TARGET/etc/lunar/local/config

echo "+ Starting rebuild of all modules"
. /etc/lunar/config

export VERBOSE=off
export BOOTLOADER=none

mkdir -p $ISO_TARGET/usr/src/

# Lets get a full-featured environment FIXME: No failsafes!
function mount_system_fs ()
{
  echo "$ISO_TARGET"
  for mpoint in proc sys dev ; do
    mount --bind /${mpoint} $ISO_TARGET/${mpoint} &> /dev/null
  done
}

function umount_system_fs ()
{
  for mpoint in proc sys dev ; do
    if ! umount $ISO_TARGET/${mpoint} &> /dev/null ; then
      umount -l -f $ISO_TARGET/${mpoint} &> /dev/null
    fi
  done
}

# iptables needs the current kernel sources
function compile_iptables ()
{
  echo "Setting up kernel directory"
  mkdir -p $ISO_TARGET/usr/src/linux
  mount --bind /usr/src/linux $ISO_TARGET/usr/src/linux

  echo "Compiling iptables"
  chroot $ISO_TARGET /sbin/lin -c iptables

  echo "Resetting kernel directory"
  umount $ISO_TARGET/usr/src/linux
  rm -rf $ISO_TARGET/usr/src/linux
}

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "+          STARTING CONFIGURING MODULES                +"
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo ""

mount_system_fs &&

# We have no dependency cache or status file
echo "Creating preliminary dependency index and cache"
chroot $ISO_TARGET lsh create_module_index
chroot $ISO_TARGET lsh create_depends_cache
#exit 0
# glibc is special
chroot $ISO_TARGET /sbin/lin --deps --reconfigure glibc

for mod in $(cat conf/base.list conf/base.list-${ISO_KSUFFIX} conf/extended.list | grep -v glibc | grep -v perl | grep -v sysvinit) ; do
  yes '' | NEVER_ASK=y chroot $ISO_TARGET /sbin/lin --deps --reconfigure $mod
done

case ${ISO_KSUFFIX} in
	2.4)
		cp kernels/conf/${ISO_KSUFFIX}/base $ISO_TARGET/etc/lunar/local/.config
		;;
	2.6)
        if [ "$ISO_KARCH" == "x86_64" ]; then
		  cp kernels/conf/${ISO_KSUFFIX}/base.$ISO_KARCH $ISO_TARGET/etc/lunar/local/.config.2.6.stable
        else
		  cp kernels/conf/${ISO_KSUFFIX}/base $ISO_TARGET/etc/lunar/local/.config.2.6.stable
        fi
		;;
esac

chroot $ISO_TARGET /sbin/lin kernel-headers-${ISO_KSUFFIX}

# install core tools manually, since we can't download


echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "+          STARTING COMPILE PHASE OF ALL MODULES       +"
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo ""

# perl is notoriously problematic and needs to be built before glibc
#chroot $ISO_TARGET /sbin/lin -c perl
chroot $ISO_TARGET /sbin/lin -c glibc
chroot $ISO_TARGET /sbin/lin -c gcc

# Remove inittab to make sure it's tracked by sysvinit
rm -f $ISO_TARGET/etc/inittab

# Compile everything but iptables (see next paragraph)
for mod in `lsh sort_by_dependency $(cat conf/base.list conf/base.list-${ISO_KSUFFIX} conf/extended.list | grep -v iptables)` ; do
  if [ "$mod" == "glibc" ]; then
    # Remove bits/syscall.h or it will be missing on the iso, we should probably patch glibc
    rm -f $ISO_TARGET/usr/include/bits/syscall.h
    chroot $ISO_TARGET /sbin/lin -c $mod
  else
    chroot $ISO_TARGET /sbin/lin -c $mod
  fi
done

# We need to setup a special environment for iptables to compile in
compile_iptables &&

# openssh installs ssh keys so these are now tracked in the module :^(
chroot $ISO_TARGET /sbin/lin -c openssh
# e2fsprogs nabs /etc/mtab
chroot $ISO_TARGET /sbin/lin -c e2fsprogs
# we don't want vi linked against libX11
chroot $ISO_TARGET /sbin/lin -c vim --opts --without-x
# We need to make sure inittab is included with sysvinit
rm -f $ISO_TARGET/etc/inittab
chroot $ISO_TARGET /sbin/lin -c sysvinit

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "+          REBUILD FINISHED                            +"
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

echo "Broken compiles:"
(cd $ISO_TARGET/usr/src/ && ls -1)
echo ""

umount_system_fs &&

touch $ISO_TARGET/.rebuild
