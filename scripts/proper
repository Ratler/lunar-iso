#!/bin/bash

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "+          PRIMARY COMPILE PHASE COMPLETED             +"
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo ""
echo "Broken compiles:"
(cd $ISO_TARGET/var/build && ls -1)
echo ""

umount $ISO_TARGET/proc &> /dev/null
umount $ISO_TARGET/dev &> /dev/null

. /etc/lunar/config
unset VERBOSE
optimize

echo "+ running ldconfig"
chroot $ISO_TARGET ldconfig

echo "+ wiping sources"
rm -f $ISO_TARGET/var/spool/lunar/*
for mod in $(cat ${ISO_SOURCE}/conf/sources.list ${ISO_SOURCE}/conf/sources.list-$ISO_KSUFFIX) ; do
  for file in $(lvu sources $mod) ; do
    echo -n "."
    if [ -f ${ISO_SOURCE}/spool/$file ] ; then
      cp -p ${ISO_SOURCE}/spool/$file $ISO_TARGET/var/spool/lunar/
    fi
  done
done

echo "+ cleaning out file structure"
for mod in $(cat ${ISO_SOURCE}/conf/extended.list) ; do
  chroot $ISO_TARGET lrm -n $mod
done
 
echo "+ cleaning temporary and unneeded files"
rm -rf $ISO_TARGET/var/log/lunar/*/* > /dev/null
rm -f $ISO_TARGET/var/log/ccache > /dev/null
rm -rf $ISO_TARGET/usr/share/locale/
rm -rf $ISO_TARGET/usr/share/{info,man,doc}/* > /dev/null
rm -rf $ISO_TARGET/usr/share/vim/vim63/doc
rm -rf $ISO_TARGET/usr/share/gtk-doc
rm -rf $ISO_TARGET/usr/include > /dev/null
rm -rf $ISO_TARGET/tmp/* 
rm -rf $ISO_TARGET/var/tmp/*
rm -rf $ISO_TARGET/var/lock/*
rm -rf $ISO_TARGET/var/run/*
rm -rf $ISO_TARGET/var/state/lunar/module_history/*
> $ISO_TARGET/var/log/lunar/activity
rm -f $ISO_TARGET/root/.bash_history
rm -f $ISO_TARGET/{lib,usr/lib}/lib*.a
rm -f $ISO_TARGET/boot/${ISO_KVER}*
rm -rf $ISO_TARGET/lib/modules/${ISO_KVER}*

rm -f $ISO_TARGET/etc/mtab
ln -s /proc/mounts $ISO_TARGET/etc/mtab

# e3 symlinks
ln -s /usr/bin/e3vi $ISO_TARGET/usr/bin/vi
ln -s /usr/bin/zile $ISO_TARGET/usr/bin/emacs

mkdir -p $ISO_TARGET/var/lib/discover
rm -f $ISO_TARGET/etc/*/*modutils
rm -f $ISO_TARGET/etc/*/*bootmisc
rm -f $ISO_TARGET/etc/*/*sysctl
rm -f $ISO_TARGET/etc/*/*nfslock
rm -f $ISO_TARGET/etc/*/*nfs
rm -f $ISO_TARGET/etc/*/*xinetd
rm -f $ISO_TARGET/etc/*/*serial
rm -f $ISO_TARGET/etc/*/*portmap

# this is a space killer:
echo "+ stripping binaries"
find $ISO_TARGET -name "lib*.so*" -exec strip {} \; 2> /dev/null

echo "+ archiving locale"
cp $ISO_TARGET/var/lib/lunar/moonbase/*/glibc/locales $ISO_TARGET/etc/lunar/local/

# moonbase
echo "+ archiving moonbase"
if [ -d $ISO_TARGET/var/lib/lunar/moonbase ] ; then (
  cd $ISO_TARGET/var/lib/lunar
  tar cjf moonbase.tar.bz2 moonbase/
  rm -rf moonbase
); fi

# core toolset
echo "+ archiving core tools"
cp $ISO_SOURCE/cache/${ISO_LUNAR_MODULE}-${ISO_DATE}-*.tar.bz2 $ISO_TARGET/var/cache/lunar/

# more more more!
rm -rf $ISO_TARGET/usr/src $ISO_TARGET/var/build
mkdir -p $ISO_TARGET/usr/src $ISO_TARGET/var/build

# re-pack tarballs
if [ "$ISO_REDUCE" == 1 ]; then
  SIZE_IN=$(du -k $ISO_TARGET/var/cache/lunar/ | cut -f1)
  echo "+ stripping install cache tarballs"
  for TARBZ in $(ls -1 $ISO_TARGET/var/cache/lunar/*bz2); do
    echo -n "++ $(basename $TARBZ)"
    tar xj -C $ISO_TARGET/var/build -f $TARBZ > /dev/null 2>&1
    LINES=$(cat $ISO_TARGET/var/build/var/log/lunar/install/* | wc -l)
    DELETED=0
    while read ITEM ; do
      if [ -e "$ISO_TARGET/$ITEM" ]; then
        (( DELETED++ ))
	rm -f "$ISO_TARGET/var/build/$ITEM" > /dev/null 2>&1
      fi
    done < $ISO_TARGET/var/build/var/log/lunar/install/*
    echo -n " ( $(echo $DELETED) / $(echo $LINES) )"
    rm -f $TARBZ
    tar cj -C $ISO_TARGET/var/build -f $TARBZ . > /dev/null 2>&1
    echo " OK"
    rm -rf $ISO_TARGET/var/build
    mkdir -p $ISO_TARGET/var/build
  done
  SIZE_OUT=$(du -k $ISO_TARGET/var/cache/lunar/ | cut -f1)
  echo "Size in : ${SIZE_IN}k"
  echo "Size out: ${SIZE_OUT}k"
fi

touch $ISO_TARGET/.proper

